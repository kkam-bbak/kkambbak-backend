name: CI Pipeline for Prod

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v5

      - name: Extract tag name
        id: tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew :kkambbak:build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: kkambbak/build/libs/*.jar

  dockerize:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout source code
        uses: actions/checkout@v5

      - name: Extract tag name
        id: tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: kkambbak/build/libs

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and tag Docker images
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kkambbak:${{ steps.tag.outputs.TAG_NAME }} .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/kkambbak:${{ steps.tag.outputs.TAG_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/kkambbak:latest

      - name: Push Docker images
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/kkambbak:${{ steps.tag.outputs.TAG_NAME }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/kkambbak:latest

      - name: Deploy to Naver Cloud
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          key: ${{ secrets.NCP_SSH_KEY }}
          password: ${{ secrets.NCP_PASSWORD }}
          script: |
            # Docker 로그인
            echo ${{ secrets.DOCKERHUB_TOKEN }} | /usr/bin/docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # 최신 이미지 pull
            /usr/bin/docker pull ${{ secrets.DOCKERHUB_USERNAME }}/kkambbak:latest

            # Docker 네트워크 생성 (없으면)
            /usr/bin/docker network create kkambbak-network || true

            # Redis 컨테이너 시작 (없으면 생성)
            if [ ! "$(/usr/bin/docker ps -q -f name=kkambbak-redis)" ]; then
              if [ "$(/usr/bin/docker ps -aq -f name=kkambbak-redis)" ]; then
                /usr/bin/docker rm kkambbak-redis
              fi
              /usr/bin/docker run -d \
                --name kkambbak-redis \
                --restart unless-stopped \
                -p 6379:6379 \
                --network kkambbak-network \
                redis:7-alpine redis-server --requirepass "${{ secrets.REDIS_PASSWORD }}"
            fi

            # 기존 애플리케이션 컨테이너 중지 및 제거
            /usr/bin/docker stop kkambbak || true
            /usr/bin/docker rm kkambbak || true

            # 애플리케이션 컨테이너 실행 (포트 8080)
            /usr/bin/docker run -d \
              --name kkambbak \
              --restart unless-stopped \
              --network kkambbak-network \
              -p 8080:8080 \
              -e "DB_URL=${{ secrets.DB_URL }}" \
              -e "DB_USERNAME=${{ secrets.DB_USERNAME }}" \
              -e "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
              -e "DB_DRIVER=${{ secrets.DB_DRIVER }}" \
              -e "JPA_DDL_AUTO=${{ secrets.JPA_DDL_AUTO }}" \
              -e "JPA_DIALECT=${{ secrets.JPA_DIALECT }}" \
              -e REDIS_HOST=kkambbak-redis \
              -e REDIS_PORT=6379 \
              -e "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" \
              -e "JWT_SECRET=${{ secrets.JWT_SECRET }}" \
              -e "JWT_ACCESS_TOKEN_EXPIRATION=${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION }}" \
              -e "JWT_REFRESH_TOKEN_EXPIRATION=${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION }}" \
              -e "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" \
              -e "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" \
              -e "OAUTH2_REDIRECT_URI=${{ secrets.OAUTH2_REDIRECT_URI }}" \
              -e "AUTH_KEY=${{ secrets.AUTH_KEY }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/kkambbak:latest

            # 사용하지 않는 이미지 정리
            /usr/bin/docker image prune -af

      - name: Notify Discord (배포 성공)
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
            -d '{
              "embeds": [
                {
                  "color": 65280,
                  "title": "✅ 운영 서버 배포 성공!",
                  "fields": [
                    {
                      "name": "Repository",
                      "value": "'"${GITHUB_REPOSITORY}"'",
                      "inline": true
                    },
                    {
                      "name": "Tag",
                      "value": "'"${{ steps.tag.outputs.TAG_NAME }}"'",
                      "inline": true
                    },
                    {
                      "name": "Commit",
                      "value": "'"${GITHUB_SHA:0:7}"'",
                      "inline": true
                    }
                  ]
                }
              ]
            }' ${{ secrets.DISCORD_WEBHOOK }}

      - name: Notify Discord (배포 실패)
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
            -d '{
              "embeds": [
                {
                  "color": 16711680,
                  "title": "❌ 운영 서버 배포 실패!",
                  "fields": [
                    {
                      "name": "Repository",
                      "value": "'"${GITHUB_REPOSITORY}"'",
                      "inline": true
                    },
                    {
                      "name": "Tag",
                      "value": "'"${{ steps.tag.outputs.TAG_NAME }}"'",
                      "inline": true
                    },
                    {
                      "name": "Commit",
                      "value": "'"${GITHUB_SHA:0:7}"'",
                      "inline": true
                    }
                  ]
                }
              ]
            }' ${{ secrets.DISCORD_WEBHOOK }}